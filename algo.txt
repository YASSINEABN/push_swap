//         if(k == i-1 || !check_list_value(stack_a , start,end,mid,sorted_list))
//         {
//             k = 0;
           
//             start -= offset;
//              if(start < 0)
//                 start = 0;
                
//             end += offset;
//         }
//             i = size(stack_a);
//         if(i == 0)
//             break;
//   }




//  while(k < i)
//  {
//     pos =  check_value(sorted_listt[k] , stack_a) ;

        
//         if(pos > size(stack_a)/2)
//         {
           
//             pos =  size(stack_a) -pos;
           
//             pos++;
//             //   printf("%d \n",pos);
//             while (pos > 0)
//             {
//                 rotate_stack_large(&stack_a);
//                  printf("raa \n");
//                 pos--;
                
//             }
//         }
//         else
//         {
//               while (pos-- > 1)
//          {
             
//              rotate_stack(&stack_a);
//              printf("ra \n");
                
//             }
//         }
//         push_b(&stack_a,&stack_b);
//           printf("pb \n");
       
//      k++;
   
    
//  }
//  k = 0;
//  while (k < i)
//  {
//      push_a(&stack_a,&stack_b);
//      printf("pa \n");
//      k++;
//  }




--- algo 2
   // int check = 0;
        // int size_stack_b = size(stack_b);
        // int cmptt = 0;     
        // int pos_of_max; 
        // int max = max_list(stack_b)->value;  
        // int val ;
        // while (1)
        // {
        //     max = max_list(stack_b)->value; 
        //         if(check == 0)
        //         {
        //             pos_of_max = pos(stack_b,max);
        //             if(pos_of_max>size_stack_b/2)
        //             {
        //                 pos_of_max++;
        //                 while (pos_of_max--)
        //                 {
        //                     rotate_stack_large(&stack_b);
        //                     // printf("rbb \n");
        //                 }

        //              }   
        //             else
        //             {
        //                 while (pos_of_max-- > 0)
        //                 {
                
        //                     rotate_stack(&stack_a);
        //                     // printf("rb \n");
        //                 }
        //             }
        //             check = 1;  
        //     }
        //     else
        //     {
        //         val = stack_b->value;
        //         if(val == max)
        //         {
        //             push_a(&stack_a, &stack_b);
        //         }
        //         else
        //             {
        //                 push_a(&stack_a, &stack_b);
        //                 rotate_stack(&stack_a);
        //                 pos_of_max = pos(stack_b,max);
        //             if(pos_of_max>size_stack_b/2)
        //             {
        //                 pos_of_max++;
        //                 while (pos_of_max--)
        //                 {
        //                     rotate_stack_large(&stack_b);
        //                     // printf("rbb \n");
        //                 }

        //              }   
        //             else
        //             {
        //                 while (pos_of_max-- > 0)
        //                 {
                
        //                     rotate_stack(&stack_a);
        //                     // printf("rb \n");
        //                 }
        //             }
        //                 push_a(&stack_a,&stack_b);
        //                 rotate_stack_large(&stack_a);
                        
        //             }
        //     }

        //      if(stack_b==NULL)
        //         break;                                              
        // }
